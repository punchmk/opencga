# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: VariantService.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import GenericService_pb2 as GenericService__pb2
import variant_pb2 as variant__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='VariantService.proto',
  package='org.opencb.opencga.storage.server.grpc',
  syntax='proto3',
  serialized_pb=_b('\n\x14VariantService.proto\x12&org.opencb.opencga.storage.server.grpc\x1a\x14GenericService.proto\x1a\rvariant.proto2\xd8\x04\n\x0eVariantService\x12p\n\x05\x63ount\x12/.org.opencb.opencga.storage.server.grpc.Request\x1a\x34.org.opencb.opencga.storage.server.grpc.LongResponse\"\x00\x12z\n\x08\x64istinct\x12/.org.opencb.opencga.storage.server.grpc.Request\x1a;.org.opencb.opencga.storage.server.grpc.StringArrayResponse\"\x00\x12k\n\x03get\x12/.org.opencb.opencga.storage.server.grpc.Request\x1a/.org.opencb.opencga.storage.server.grpc.Variant\"\x00\x30\x01\x12v\n\x07getJson\x12/.org.opencb.opencga.storage.server.grpc.Request\x1a\x36.org.opencb.opencga.storage.server.grpc.StringResponse\"\x00\x30\x01\x12s\n\x07groupBy\x12/.org.opencb.opencga.storage.server.grpc.Request\x1a\x35.org.opencb.opencga.storage.server.grpc.GroupResponse\"\x00\x42\x15\x42\x13VariantServiceModelb\x06proto3')
  ,
  dependencies=[GenericService__pb2.DESCRIPTOR,variant__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)





DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('B\023VariantServiceModel'))
import abc
import six
from grpc.beta import implementations as beta_implementations
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

class BetaVariantServiceServicer(six.with_metaclass(abc.ABCMeta, object)):
  """<fill me in later!>"""
  @abc.abstractmethod
  def count(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def distinct(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def get(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def getJson(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def groupBy(self, request, context):
    raise NotImplementedError()

class BetaVariantServiceStub(six.with_metaclass(abc.ABCMeta, object)):
  """The interface to which stubs will conform."""
  @abc.abstractmethod
  def count(self, request, timeout):
    raise NotImplementedError()
  count.future = None
  @abc.abstractmethod
  def distinct(self, request, timeout):
    raise NotImplementedError()
  distinct.future = None
  @abc.abstractmethod
  def get(self, request, timeout):
    raise NotImplementedError()
  @abc.abstractmethod
  def getJson(self, request, timeout):
    raise NotImplementedError()
  @abc.abstractmethod
  def groupBy(self, request, timeout):
    raise NotImplementedError()
  groupBy.future = None

def beta_create_VariantService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import variant_pb2
  import GenericService_pb2
  request_deserializers = {
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'count'): GenericService_pb2.Request.FromString,
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'distinct'): GenericService_pb2.Request.FromString,
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'get'): GenericService_pb2.Request.FromString,
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'getJson'): GenericService_pb2.Request.FromString,
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'groupBy'): GenericService_pb2.Request.FromString,
  }
  response_serializers = {
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'count'): GenericService_pb2.LongResponse.SerializeToString,
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'distinct'): GenericService_pb2.StringArrayResponse.SerializeToString,
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'get'): variant_pb2.Variant.SerializeToString,
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'getJson'): GenericService_pb2.StringResponse.SerializeToString,
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'groupBy'): GenericService_pb2.GroupResponse.SerializeToString,
  }
  method_implementations = {
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'count'): face_utilities.unary_unary_inline(servicer.count),
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'distinct'): face_utilities.unary_unary_inline(servicer.distinct),
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'get'): face_utilities.unary_stream_inline(servicer.get),
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'getJson'): face_utilities.unary_stream_inline(servicer.getJson),
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'groupBy'): face_utilities.unary_unary_inline(servicer.groupBy),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_VariantService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import variant_pb2
  import GenericService_pb2
  request_serializers = {
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'count'): GenericService_pb2.Request.SerializeToString,
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'distinct'): GenericService_pb2.Request.SerializeToString,
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'get'): GenericService_pb2.Request.SerializeToString,
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'getJson'): GenericService_pb2.Request.SerializeToString,
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'groupBy'): GenericService_pb2.Request.SerializeToString,
  }
  response_deserializers = {
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'count'): GenericService_pb2.LongResponse.FromString,
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'distinct'): GenericService_pb2.StringArrayResponse.FromString,
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'get'): variant_pb2.Variant.FromString,
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'getJson'): GenericService_pb2.StringResponse.FromString,
    ('org.opencb.opencga.storage.server.grpc.VariantService', 'groupBy'): GenericService_pb2.GroupResponse.FromString,
  }
  cardinalities = {
    'count': cardinality.Cardinality.UNARY_UNARY,
    'distinct': cardinality.Cardinality.UNARY_UNARY,
    'get': cardinality.Cardinality.UNARY_STREAM,
    'getJson': cardinality.Cardinality.UNARY_STREAM,
    'groupBy': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'org.opencb.opencga.storage.server.grpc.VariantService', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
